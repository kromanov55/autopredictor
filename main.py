import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import LabelEncoder
from sklearn.tree import DecisionTreeRegressor
from sklearn.linear_model import Ridge
import streamlit as st
from sklearn.metrics import r2_score

st.set_page_config(
        page_title="My Page Title",
        layout="wide",
)

st.header('üìà –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏', divider='red')
uploaded_file = st.file_uploader('Choose a file')
if uploaded_file is not None:
        ft = uploaded_file.type.split('/')[1]
        if ft == 'csv':
                df = pd.read_csv(uploaded_file)
        elif ft == 'xls' or ft == 'xlsx':
                df = pd.read_excel(uploaded_file)
        df.dropna(inplace=True)
        st.text('–ü–µ—Ä–≤—ã–µ —Ç—Ä–∏ —Å—Ç—Ä–æ—á–∫–∏ –≤–∞—à–µ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞:')
        st.dataframe(df.head(3))
        #df.apply(LabelEncoder().fit_transform)
        target = st.selectbox(
                '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü Y',
                list(df.columns)
        )
        target_num = 0
        for i in range(len(df.columns)):
                if target == df.columns[i]:
                        target_num = i
        y = df.iloc[:,target_num]
        st.dataframe(y)
        #y = df.iloc[:, -1]
        c = df.columns[-1]
        x = df.drop(target, axis=1)
        options = st.multiselect(
                '–£–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±—Ü—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å–º–æ–≥—É—Ç –ø–æ–º–æ—á—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –ü—Ä–∏–º–µ—Ä: ID –æ–±—ä–µ–∫—Ç–∞',
                x.columns)
        x = x.drop(options, axis=1)
        options1 = st.multiselect(
                '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±—Ü—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏, —á—Ç–æ–±—ã –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –∏—Ö –≤ —á–∏—Å–ª–µ–Ω–Ω—ã–π –≤–∏–¥',
                x.columns)
        le = LabelEncoder()
        for i in options1:
                x[i] = le.fit_transform(x[i])
        st.dataframe(x)
        #options2 = st.multiselect(
                #'–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±—Ü—ã –∫ –∫–æ—Ç–æ—Ä—ã–º —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏—é',
                #x.columns)
        #ss = StandardScaler()
        #x = ss.fit_transform(x)
        #for i in options2:
                #x[i] = ss.fit_transform(x[i])
        cols = list(x.columns)
        st.text('X –¥–∞–Ω–Ω—ã–µ')
        st.dataframe(x)
        st.text('Y –¥–∞–Ω–Ω—ã–µ')
        st.dataframe(y)
        X_train, X_test, y_train, y_test = train_test_split(x, y, train_size=0.75, random_state=42)

        model = LinearRegression()
        model.fit(X_train, y_train)
        y_pred = model.predict(X_test)

        modeldt = DecisionTreeRegressor(random_state=42)
        modeldt.fit(X_train, y_train)
        y_pred_dt = modeldt.predict(X_test)

        ridgeReg = Ridge(random_state=42)
        ridgeReg.fit(X_train, y_train)
        y_pred_ridge = ridgeReg.predict(X_test)


        fig = plt.figure(figsize=(12, 12))

        nm = r2_score(y_test, y_pred)
        quality = round(nm * 100, 2)
        q_i = str(quality)
        st.text(f'–¢–æ—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∞ (–ª–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è):{q_i}%')

        nm1 = r2_score(y_test, y_pred_dt)
        quality1 = round(nm1 * 100, 2)
        q_i1 = str(quality1)
        st.text(f'–¢–æ—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∞ (–¥–µ—Ä–µ–≤–æ —Ä–µ—à–µ–Ω–∏–π):{q_i1}%')

        nm2 = r2_score(y_test, y_pred_ridge)
        quality2 = round(nm2 * 100, 2)
        q_i2 = str(quality2)
        st.text(f'–¢–æ—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∞ (Ridge):{q_i2}%')

        plt.subplot(3,1,1)
        plt.scatter(X_test.index, y_test, color="red")
        plt.scatter(X_test.index, y_pred, color="blue")
        plt.subplot(3, 1, 2)
        plt.scatter(X_test.index, y_test, color="red")
        plt.scatter(X_test.index, y_pred_dt, color="blue")
        st.pyplot(fig)
        plt.subplot(3, 1, 3)
        plt.scatter(X_test.index, y_test, color="red")
        plt.scatter(X_test.index, y_pred_ridge, color="blue")
        st.pyplot(fig)

        lst = []
        for i in range(len(cols)):
                line = str(cols[i])
                a = st.number_input(line)
                lst.append(a)
        for i in range(len(lst)):
                st.text(lst[i])
        st.text(lst)
        test = pd.DataFrame(lst, cols)
        test = test.T
        pred = model.predict(test)
        st.text(f'Predicted {c} = {pred}')
else:
        st.warning('You need to upload a csv or excel file.')
